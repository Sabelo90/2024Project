@model ClientIndexViewModel


@{
    ViewBag.Title = "My Wallet";
}

<style>
    body {
        background-color: #f8f9fa;
    }

    .sidebar {
        height: 100vh;
        background-color: #ffffff;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    }

        .sidebar h4 {
            font-weight: bold;
            color: #333;
        }

        .sidebar .nav-link {
            font-size: 1.1rem;
            font-weight: 500;
            padding: 15px 20px;
            color: #555;
            transition: all 0.3s ease;
        }

            .sidebar .nav-link:hover {
                background-color: #f8f9fa;
            }

            .sidebar .nav-link.active {
                background-color: #e9ecef;
                color: #007bff;
                font-weight: bold;
            }

            .sidebar .nav-link i {
                margin-right: 10px;
                color: #007bff;
            }

    .main-content {
        padding: 2rem;
    }

    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        transition: transform 0.3s ease-in-out;
    }

        .card:hover {
            transform: translateY(-5px);
        }

    .account-card {
        background: linear-gradient(45deg, #4e54c8, #8f94fb);
        color: white;
    }

        .account-card .card-title {
            font-size: 1.5rem;
            font-weight: 700;
        }

        .account-card .card-text {
            font-size: 1.1rem;
        }

    .transfer-form {
        background-color: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin-top: 1.5rem;
    }

    .finance-card {
        height: 100%;
    }

        .finance-card .card-body {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

    .finance-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .btn-custom {
        border-radius: 50px;
        padding: 0.5rem 1.5rem;
        font-weight: 600;
    }

    .btn-deposit {
        background-color: #4e54c8;
        color: white;
    }

    .btn-withdraw {
        background-color: #ff6b6b;
        color: white;
    }
</style>


<div class="container-fluid">
    <div class="row">
        <div class="col-2 bg-light sidebar">
            <div class="d-flex align-items-center py-3">
                <i class="fas fa-circle me-2 text-success"></i>
                <h4 class="m-0">Account</h4>
            </div>
            <ul class="nav flex-column">
                <li class="nav-item">
                    <a class="nav-link active" asp-action="Wallet"><i class="fas fa-wallet me-2"></i> My Wallet</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-action="UserLogins"><i class="fas fa-chart-line me-2"></i> Log-ins</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" asp-action="Account"><i class="fa-solid fa-user"></i> Manage Profile</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" asp-action="Transactions"><i class="fas fa-exchange-alt me-2"></i> Transactions</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-action="Messages"><i class="fas fa-envelope me-2"></i> Messages</a>
                </li>
            </ul>
        </div>
        <div class="col-10 main-content">
            <div class="mb-4">
                <h2 class="fw-bold">Hello,  @Model.user.FirstName</h2>
                <p class="text-muted">You can manage your account here</p>
            </div>

            <div class="card account-card mb-4">
                <div class="card-body d-flex align-items-center">
                    <img src="~/Images/Card.png" class="me-3 rounded" alt="Card Image">
                    <div>
                        <h4 class="card-title mb-2">Account Number: @Model.bankAccount.AccountNumber</h4>
                        <p class="card-text mb-0">Name: @Model.user.UserName</p>
                        <small>Date: @Model.Date</small>
                    </div>
                    <div class="ms-auto">
                        <h3 class="mb-0">R @Model.bankAccount.Balance.ToString("0.00")</h3>
                        <i class="fab fa-cc-visa fa-2x"></i>
                    </div>
                </div>
            </div>

            <div class="transfer-form mb-4">
                <h5 class="mb-3">Transfer</h5>
                <form method="post" action="Transfer" class="row g-3 align-items-center" id="depositForm">
                    <div id="error-message" class="text-danger mt-2"></div>
                    <div class="col-md-4">
                        <input type="number" name="accountNo" class="form-control" id="accountNo" placeholder="Account No.">
                    </div>
                    <div class="col-md-4">
                        <input type="number" name="amount" class="form-control" id="transferAmount" placeholder="Amount">
                    </div>
                    <div class="col-md-4">
                        <button type="submit" class="btn btn-custom btn-deposit w-100" onclick="onTransfer()">Transfer</button>
                    </div>
                </form>
            </div>

            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="card finance-card">
                        <div class="card-body text-center">
                            <i class="fas fa-wallet finance-icon text-primary"></i>
                            <h5 class="card-title">Total Income</h5>
                            <p class="card-text fw-bold fs-4 mb-3">R @Model.moneyIn.ToString("0.00")</p>
                            <span class="text-success mb-3 d-block"><i class="fas fa-arrow-up"></i> Income</span>
                            <form method="post" action="Deposit" class="mt-3" id="depositForm">
                                <div id="error-message" class="text-danger mt-2"></div>
                                <div class="input-group mb-3">
                                    <input type="number" name="amount" class="form-control" id="depositAmount" placeholder="Deposit">
                                    <button type="submit" class="btn btn-custom btn-deposit" onclick="onDeposit()">Deposit</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mb-4">
                    <div class="card finance-card">
                        <div class="card-body text-center">
                            <i class="fas fa-credit-card finance-icon text-danger"></i>
                            <h5 class="card-title">Total Expenses</h5>
                            <p class="card-text fw-bold fs-4 mb-3">R @Model.moneyOut.ToString("0.00")</p>
                            <span class="text-danger mb-3 d-block"><i class="fas fa-arrow-down"></i> Expenses</span>
                            <form method="post" action="Withdraw" class="mt-3" id="withdrawForm">
                                <div id="error-message" class="text-danger mt-2"></div>
                                <div class="input-group mb-3">
                                    <input type="number" name="amount" class="form-control" id="withdrawAmount" placeholder="Withdraw">
                                    <button type="submit" class="btn btn-custom btn-withdraw" onclick="onWithdraw('@Model.bankAccount.Balance')">Withdraw</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
    </div>
</div>




@section Scripts {
    <script>
        // Withdrawal function
        function onWithdraw(amount) {
            let withdrawAmountValue = parseFloat(document.getElementById('withdrawAmount').value);
            let accountBalance = parseFloat(amount); // Assume this value comes from backend

            // Debugging: Log the values to ensure they are correct
            console.log("Withdraw Amount:", withdrawAmountValue);
            console.log("Account Balance:", accountBalance);

            // Validate the input
            if (isNaN(withdrawAmountValue) || withdrawAmountValue <= 0) {
                alert("Please enter a valid positive amount.");
                return;
            }

            if (withdrawAmountValue > accountBalance) {
                alert("You cannot withdraw more than your available balance!");
                return;
            }

            const confirmation = confirm("Are you sure you want to withdraw this amount?");
            if (confirmation) {
                alert("Transaction successful.");
            } else {
                alert("Transaction canceled.");
            }
        }

        // Deposit function
        function onDeposit() {
            let depositAmountValue = parseFloat(document.getElementById('depositAmount').value);

            // Debugging: Log the value to ensure it is correct
            console.log("Deposit Amount:", depositAmountValue);

            // Validate the input
            if (isNaN(depositAmountValue) || depositAmountValue <= 0) {
                alert("Please enter a valid positive amount.");
                return;
            }

            const confirmation = confirm("Are you sure you want to deposit this amount?");
            if (confirmation) {
                alert("Deposit successful.");
            } else {
                alert("Deposit canceled.");
                document.getElementById('depositAmount').value = 0;
            }
        }

        // Transfer function
        function onTransfer() {
            // Get the transfer amount, account balance, and account number
            let transferAmount = parseFloat(document.getElementById('transferAmount').value);
            let accountBalance = parseFloat('@Model.bankAccount.Balance');
            let accountNo = document.getElementById('accountNo').value.trim();

            // Debugging: Log the values
            console.log("Transfer Amount:", transferAmount);
            console.log("Account Balance:", accountBalance);
            console.log("Account Number:", accountNo);

            // Validate if the account number is not empty
            if (!accountNo) {
                alert("Please enter a valid account number.");
                return false; // Stop form submission
            }

            // Validate if transfer amount is valid and not greater than the balance
            if (isNaN(transferAmount) || transferAmount <= 0) {
                alert("Please enter a valid transfer amount.");
                return false; // Stop form submission
            }

            if (transferAmount > accountBalance) {
                alert("You cannot transfer more than your available balance.");
                return false; // Stop form submission
            }

            // Confirmation prompt before proceeding
            const confirmation = confirm("Are you sure you want to transfer this amount?");
            if (confirmation) {
                alert("Transfer successful.");
                return true; // Allow form submission
            } else {
                alert("Transfer canceled.");
                return false; // Stop form submission
            }
        }
    </script>
}


